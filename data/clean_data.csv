Learning concept,Objective
OOP->Abstraction->Object,Demonstrate a good understanding of objects;Demonstrate a familiarity of using an array of objects;
OOP->Abstraction->Object->Reference Variables,Demonstrate a good understanding of reference variables;
DS->Basics,Demonstrate a good understanding of data structures;
DS->Basics->ADTs,Demonstrate a good understanding of ADTs
DS->Basics->ADTs->Interface,Demonstrate a good understanding of Interfaces;Design and implement an interface;
DS->Basics->ADTs->Abstract Class,Explain the difference between interfaces and abstract classes in Java (same conceptual difference in C/C++);
DS->Basics->Generics,Demonstrate an understanding of generics;
DS->Basics->Generics->Generic Methods,Design and implement generic methods to solve a problem;
DS->Basics->Generics->Class Generics,Design and implement generic classes to solve a problem;
DS->Basics->Algorithm Analysis,Apply time complexity analysis guideline to an algorithm;Analyze time complexity of an algorithm in worst case;
DS->Basics->Algorithm Analysis->O Notation,"Demonstrate an understanding of big O notation;Evaluate the asymptotic order of five growth functions: O(1), O(log N), O(N), O(N log N), O(N^2);"
DS->Basics->Unit Testing,Demonstrate an understanding of unit testing;Apply the JUnit testing technique in a programming lab;
DS->Building Blocks->Array,Demonstrate an understanding of an array of objects;Demonstrate an understanding of how to walk through an array of objects;Program to declare an array of objects;Program to partially initialize an array of objects; Program to initialize an array of objects by looping;Program to access an element of an array of objects;Program to pass an array of objects to a function;
DS->Building Blocks->Array->Array Traversal/Search,Program to walk through an array of objects and search for a target;
DS->Building Blocks->Array->Array Insertion,Program to insert an element in the beginning or end of an array of objects; Program to insert an element in the middle of an array of objects;
DS->Building Blocks->Array->Array Removing,Program to remove an element in the beginning or end of an array of objects; Program to remove an element in the middle of an array of objects;
DS->Building Blocks->ArrayList,Demonstrate an understanding of how to make a ArrayList;
DS->Building Blocks->ArrayList->ArrayList Traversal/Search,Program to walk through an ArrayList of objects and search for a target;
DS->Building Blocks->ArrayList->ArrayList Insertion,Program to insert an element in the beginning or end of an ArrayList of objects; Program to insert an element in the middle of an ArrayList of objects;
DS->Building Blocks->ArrayList->ArrayList Removing,Program to remove an element in the beginning or end of an ArrayList of objects;  Program to remove an element in the middle of an ArrayList of objects;
DS->Building Blocks->Linked List,"Explain the difference among array, ArrayList, and LinkedList;Evaluate time complexity of each opeartion;Distinguish the usage of array and linked list;Explain the advantages and disadvantages of array versus linked list;Apply Java built-in LinkedList (add, get, set, remove, ListIterator);Apply linked list in an application;Demonstrate an understanding of linked nodes;"
DS->Building Blocks->Linked List->Reference Variable,Demonstrate an understanding of how to use reference variable(s) to link objects;
DS->Building Blocks->Singly Linked List,Create a generic singly-linked node;
DS->Building Blocks->Singly Linked List->SLL Traversal/Search,Demonstrate an understanding of how to walk through the linked list through looping and references;
DS->Building Blocks->Singly Linked List->SLL Insertion,Program to insert a linked node in the middle of a singly-linked list;Program to insert a linked node in the beginning or end of a singly-linked list;
DS->Building Blocks->Singly Linked List->SLL Removing,Program to remove a linked node in the middle of a singly-linked list;Program to remove a linked node in the beginning or end of a singly-linked list;
DS->Building Blocks->Doubly Linked List,Create a generic doubly-linked node;
DS->Building Blocks->Doubly Linked List->DLL Traversal/Search,Demonstrate an understanding of how to walk through the doubly-linked list through looping and references;
DS->Building Blocks->Doubly Linked List->DLL Insertion,Program to insert a linked node in the middle of a doubly-linked list;Program to insert a linked node in the beginning or end of a doubly-linked list;
DS->Building Blocks->Doubly Linked List->DLL Removing,Program to remove a linked node in the middle of a doubly-linked list;Program to remove a linked node in the beginning or end of a doubly-linked list;
DS->Building Blocks->Circular Doubly Linked List,Create a generic circular doubly-linked node;
DS->Building Blocks->Circular Doubly Linked List->CDLL Traversal/Search,Demonstrate an understanding of how to walk through the circular doubly-linked list through looping and references;
DS->Building Blocks->Circular Doubly Linked List->CDLL Insertion,Program to insert a linked node in the middle of a circular doubly-linked list;Program to insert a linked node in the beginning or end of a circular doubly-linked list;
DS->Building Blocks->Circular Doubly Linked List->CDLL Removing,Program to remove a linked node in the middle of a circular  doubly-linked list;Program to remove a linked node in the beginning or end of a circular  doubly-linked list;
DS->Linear DS->Stack,Apply java built-in stack to solve a computational problem;Compare and analyze two implementations of stacks: linked list and arrays;
DS->Linear DS->Stack->Stack Conceptal View,"Demonstrate an understanding of conceptual view of stacks (FILO data structures);Demonstrate an understanding of basic operations of stacks: push, pop, and peek;"
DS->Linear DS->Stack->Stack Array Implementation,Program the array-based implementation of stacks;
DS->Linear DS->Stack->Stack Linked List Implementation,Program the linked list-based implementation of stacks;
DS->Linear DS->Queue,Apply java built-in queue to solve a computational problem;Compare and analyze two implementations of queues: linked list and arrays;
DS->Linear DS->Queue->Queue Conceptal View,"Demonstrate an understanding of conceptual view of queues (FIFO data structures);Demonstrate an understanding of basic operations of queues: enqueuer (add), dequeuer (remove), and first (peek);"
DS->Linear DS->Queue->Queue Array Implementation,Program the array-based implementation of queues;
DS->Linear DS->Queue->Queue Linked List Implementation,Program the linked list-based implementation of queues;
DS->Linear DS->List,Apply java built-in LinkedList to solve a computational problem;Compare and analyze two implementations of lists: linked list and arrays;
DS->Linear DS->List->List Conceptal View,Demonstrate an understanding of conceptual view of lists;Demonstrate an understanding of basic operations of lists;
DS->Linear DS->List->List Array Implementation,Program the array-based implementation of lists;
DS->Linear DS->List->Linked List Implementation,Program the linked list-based implementation of lists;
DS->Non-linear DS->Hash Table,Apply hash tables to solve a problem;
DS->Non-linear DS->Hash Table->Hash Function (Hash Table),Apply a hash function in a hash table;Demonstrate an understanding of hash functions;Demonstrate an understanding of hash collision;
DS->Non-linear DS->Hash Table->Hash Table Conceptual View,Demonstrate an understanding of hash tables;Demonstrate an understanding of direct hashing in a hash table;
DS->Non-linear DS->Hash Table->Hash Table Handling Collision,Demonstrate an understanding of hash collision in hash tables;Apply the chaining technique to solve hash collision;Apply the open addressing technique to solve hash collision;Apply hash tables or hash maps to solve a problem;
DS->Non-linear DS->Hash Map,Apply hash maps to solve a problem;
DS->Non-linear DS->Hash Map->Hash Function (Hash Map),Apply a hash function in a hash map;
DS->Non-linear DS->Hash Map->Hash Map Conceptual View,Demonstrate an understanding of hash maps;Demonstrate an understanding of direct hashing in a hash map;
DS->Non-linear DS->Hash Map->Hash Map Handling Collision,Demonstrate an understanding of hash collision in hash maps;Apply the chaining technique to solve hash collision in hash maps;Apply the open addressing technique to solve hash collision in hash maps;
DS->Non-linear DS->Hash Map->Java Built-in HashMap,Demonstrate an understanding of java built-in HashMap;Apply java built-in HashMap to solve a computational problem;
DS->Non-linear DS->Tree->Tree Definition,Demonstrate an understanding of tree definition;
DS->Non-linear DS->Tree->Tree Terms,"Demonstrate an understanding of tree terms, root, edge, child, parent, leaf, height, depth;"
DS->Non-linear DS->Tree->Tree Traversal->Tree DFS,Demonstrate an understanding of depth-first search of trees;
DS->Non-linear DS->Tree->Tree Traversal->Tree BFS,Demonstrate an understanding of breadth-first search of trees;
DS->Non-linear DS->Tree->Binary Tree,Demonstrate an understanding of binary trees;
DS->Non-linear DS->Tree->Binary Tree->Binary Tree Traversal->Pre-order Traversal,Apply recursion to binary tree traversal (pre-order traversal);
DS->Non-linear DS->Tree->Binary Tree->Binary Tree Traversal->In-order Traversal,Apply recursion to binary tree traversal (in-order traversal);
DS->Non-linear DS->Tree->Binary Tree->Binary Tree Traversal->Post-order Traversal,Apply recursion to binary tree traversal (post-order traversal);
DS->Non-linear DS->Tree->Binary Tree->Binary Tree Traversal->Binary Tree BFS,Apply queue to lever-order traversal;
DS->Non-linear DS->Tree->Binary Tree->Binary Search Tree,Demonstrate an understanding of binary search tree; 
DS->Non-linear DS->Tree->Binary Tree->Binary Search Tree->Search Algorithm,Demonstrate an understanding of search algorithm of binary search tree; 
DS->Non-linear DS->Tree->Binary Heap,Demonstrate an understanding of binary heap;
DS->Non-linear DS->Graph,Apply a graph data structure to solve a problem;
DS->Non-linear DS->Graph->Graph Conceptual View,Demonstrate an understanding of a graph data structure;
DS->Non-linear DS->Graph->Graph Terms,Demonstrate an understanding of graph terms;
DS->Non-linear DS->Graph->Adjacent List,Demonstrate an understanding of the graph representation of adjacent lists;Implement the graph abstract data type using adjacent lists;
DS->Non-linear DS->Graph->Adjacent Matrix,Demonstrate an understanding of the graph representation of adjacent matrix;Implement the graph abstract data type using adjacent matrix;
DS->Non-linear DS->Graph->Graph Traversal->Graph DFS,Demonstrate an understanding of graph DFS traversal;
DS->Non-linear DS->Graph->Graph Traversal->Graph BFS,Demonstrate an understanding of graph BFS traversal;
Algorithms->Non-recursive Alg.,Demonstrate an understanding of non-recursive algorithms;
Algorithms->Non-recursive Alg.->Search,Apply the Comparable interface for object comparison;Demonstrate an understanding of a search algorithm;
Algorithms->Non-recursive Alg.->Search->Linear Search,Demonstrate an understanding of linear search ;Analyze time complexity of linear search;
Algorithms->Non-recursive Alg.->Search->Binary Search,Demonstrate an understanding of binary search ; Analyze time complexity of binary search;
Algorithms->Non-recursive Alg.->Sort,Demonstrate an understanding of sorting;
Algorithms->Non-recursive Alg.->Sort->Insertion Sort,Demonstrate an understanding of insertion sort;Analyze time complexity of insertion sort;
Algorithms->Non-recursive Alg.->Sort->Selection Sort,Demonstrate an understanding of selection sort;Analyze time complexity of selection sort;
Algorithms->Non-recursive Alg.->Sort->Bubble Sort,Demonstrate an understanding of bubble sort;Analyze time complexity of bubble sort;
Algorithms->Recursive Alg.->Recursive Alg. Definition,Demonstrate an understanding of recursion;
Algorithms->Recursive Alg.->Recursive Binary Search,Demonstrate an understanding of recursive binary search algorithm;
Algorithms->Recursive Alg.->Recursive Sort->Merge Sort,Demonstrate an understanding of recursive merge sort;
Algorithms->Recursive Alg.->Recursive Sort->Quick Sort,Demonstrate an understanding of recursive quick sort;
